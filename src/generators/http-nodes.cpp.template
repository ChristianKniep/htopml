/*************** GENERATED FILE *****************/

#include <cstdio>
#include <htopml/TemplatePageHttpNode.h>
#include <htopml/HtopmlHttpServer.h>
#include "{{FILE_PREFIX}}-http-nodes.h"

//XSL-FOREACH /htopml/exports/export
$XSL{{name}}HttpNode::$XSL{{name}}HttpNode(const std::string & addr)
	:htopml::JsonHttpNode<$XSL{{struct}}>(addr,&data)
{
};

void $XSL{{name}}HttpNode::onRequest(const htopml::HttpRequest & request)
{
	$XSL{{update}}
};
//XSL-END-FOREACH

static void register_user_pages(htopml::HtopmlHttpServer & server)
{
	fputs("Load {{FILE_PREFIX}} analysis\n",stderr);
	//setup dyanmic nodes
	//XSL-FOREACH /htopml/exports/export
	server.registerHttpNode(new $XSL{{name}}HttpNode("$XSL{{/htopml/config/root-mount-point}}/$XSL{{mount}}"),true);
	//XSL-END-FOREACH

	//mount some static files
	server.quickRegisterFile("$XSL{{/htopml/config/root-mount-point}}/{{FILE_PREFIX}}-graphs.js",STATIC_DATA_PATH "/{{FILE_PREFIX}}-graphs.js",false);
	server.registerHttpNode(new htopml::TemplatePageHttpNode("$XSL{{/htopml/config/root-mount-point}}/{{FILE_PREFIX}}-view.html",STATIC_DATA_PATH "/{{FILE_PREFIX}}-view.html",false));

	//setup icon
	std::string icon;
	//XSL-IF /htopml/config/icon
	icon = "$XSL{{/htopml/config/root-mount-point}}/icons/$XSL{{htopml/config/icon}}";
	server.quickRegisterFile(icon,STATIC_DATA_PATH "/$XSL{{htopml/config/icon}}");
	//XSL-END-IF

	//add menu entry	
	server.addMenuEntry("$XSL{{/htopml/config/name}}","$XSL{{/htopml/config/root-mount-point}}/{{FILE_PREFIX}}-view.html",icon);
};

REGISTER_TO_SERVER(register_user_pages);
